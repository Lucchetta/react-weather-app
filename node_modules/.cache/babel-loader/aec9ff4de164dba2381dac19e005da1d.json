{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/francescalmccall/Desktop/react-weather-app/src/WeatherForecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport axios from \"axios\";\nimport \"./WeatherForecast.css\";\nexport default function WeatherForecast(props) {\n  _s();\n\n  const [loaded, setLoaded] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  function handleForscastResponse(response) {\n    setForecast(response.data);\n    setLoaded(true);\n  }\n\n  if (loaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"WeatherForecast row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [new Date(forecast.list[0].dt * 1000), \":00\", /*#__PURE__*/_jsxDEV(WeatherIcon, {\n          code: forecast.list[0].weather[0].icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this), Math.round(forecast.list[0].main.temp), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  } else {\n    let apiKey = \"87a4d33f9276aba60312862a75e60dce\";\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n    axios.get(url).then(handleForscastResponse);\n    return props.city;\n  }\n}\n\n_s(WeatherForecast, \"20/pdcvQnLtcZUd5Lz9vhTDggVQ=\");\n\n_c = WeatherForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"sources":["/Users/francescalmccall/Desktop/react-weather-app/src/WeatherForecast.js"],"names":["React","useState","WeatherIcon","axios","WeatherForecast","props","loaded","setLoaded","forecast","setForecast","handleForscastResponse","response","data","Date","list","dt","weather","icon","Math","round","main","temp","apiKey","url","city","get","then"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AAGA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAAA;;AAC9C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;;AAGI,WAASS,sBAAT,CAAgCC,QAAhC,EAAyC;AAErCF,IAAAA,WAAW,CAACE,QAAQ,CAACC,IAAV,CAAX;AACAL,IAAAA,SAAS,CAAC,IAAD,CAAT;AAIH;;AAED,MAAID,MAAJ,EAAY;AAER,wBACI;AAAK,MAAA,SAAS,EAAE,qBAAhB;AAAA,6BACI;AAAK,QAAA,SAAS,EAAE,KAAhB;AAAA,mBACC,IAAIO,IAAJ,CAASL,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBC,EAAjB,GAAsB,IAA/B,CADD,sBAEA,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEP,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBE,OAAjB,CAAyB,CAAzB,EAA4BC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAFA,EAGCC,IAAI,CAACC,KAAL,CAAWX,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBM,IAAjB,CAAsBC,IAAjC,CAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH,GAZD,MAYO;AACL,QAAIC,MAAM,GAAG,kCAAb;AACA,QAAIC,GAAG,GAAI,sDAAqDlB,KAAK,CAACmB,IAAK,UAASF,MAAO,eAA3F;AACEnB,IAAAA,KAAK,CAACsB,GAAN,CAAUF,GAAV,EAAeG,IAAf,CAAoBhB,sBAApB;AACA,WAAOL,KAAK,CAACmB,IAAb;AAEH;AAGJ;;GAnCuBpB,e;;KAAAA,e","sourcesContent":["import React, {useState} from \"react\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport axios from \"axios\";\nimport \"./WeatherForecast.css\";\n\n\nexport default function WeatherForecast(props){\nconst [loaded, setLoaded] = useState(false);\nconst [forecast, setForecast] = useState(null);\n\n\n    function handleForscastResponse(response){\n\n        setForecast(response.data);\n        setLoaded(true);\n        \n\n\n    }\n\n    if (loaded) {\n        \n        return(\n            <div className= \"WeatherForecast row\">\n                <div className= \"col\">\n                {new Date(forecast.list[0].dt * 1000)}:00\n                <WeatherIcon code={forecast.list[0].weather[0].icon} />\n                {Math.round(forecast.list[0].main.temp)}Â°C\n \n                </div>\n            </div> \n        );   \n    } else {\n      let apiKey = \"87a4d33f9276aba60312862a75e60dce\";\n      let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n        axios.get(url).then(handleForscastResponse);\n        return props.city;\n\n    }\n    \n   \n}"]},"metadata":{},"sourceType":"module"}